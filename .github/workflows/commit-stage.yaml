name: Commit stage

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      triggering-sha:
        required: true
        type: string

env:
  # PHP SETTINGS
  PHP_EXTENSIONS: json
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v3

jobs:
  commit-checks:
      name: Commit checks
      runs-on: ubuntu-22.04
      timeout-minutes: 10
      strategy:
          matrix:
              php:
                  - '8.2'
          fail-fast: false
      steps:
          - name: Checkout on SHA-${{ inputs.triggering-sha }}
            uses: actions/checkout@v5
            with:
                ref: ${{ inputs.triggering-sha }}

          - name: Setup PHP and composer dependencies
            uses: './.github/actions/php-setup'
            with:
                php-version: '8.2'
                php-extensions: ${{ env.PHP_EXTENSIONS }}
                extensions-cache-key:  ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
                use_php_extensions-cache: ${{ vars.USE_PHP_EXTENSION_CACHE }}
                use_composer-cache: ${{ vars.USE_COMPOSER_CACHE }}

          - name: Run composer validate
            run: |
                composer validate --strict --ansi

          - name: Run composer normalize
            if: always()
            run: |
                composer-normalize --dry-run --ansi

          - name: Run ecs CODING STANDARDS
            if: always()
            run: |
                composer bin ecs install --ansi
                ./vendor/bin/ecs --ansi

          - name: Run psalm STATIC ANALYSIS
            if: always()
            run: |
                composer bin psalm install --ansi
                ./bin/console lint:container -e dev --ansi
                ./vendor/bin/psalm

          - name: Run rector MAINTENANCE
            if: always()
            run: |
                composer bin rector install --ansi
                ./vendor/bin/rector process --dry-run --ansi

          - name: Run architecture checks
            if: always()
            run: |
                composer bin phparkitect install --ansi
                ./vendor/bin/phparkitect check --ansi
          
          
          #
          # Additional checks, they are precondition before
          # 'acceptance stage' phase of the CI
          #

          - name: Run yml linter on configurations files
            run: |
                ./bin/console lint:yaml config/ --ansi

          - name: Run linter on symfony containers (prod|dev)
            run: |
                ./bin/console lint:container -e prod --ansi
                ./bin/console lint:container -e dev --ansi

          - name: Run linter on all twig templates
            run: |
                ./bin/console lint:twig --ansi
            env:
                APP_ENV: dev



  unit-test:
      name: Unit tests (php-${{ matrix.php }})
      runs-on: ubuntu-22.04
      timeout-minutes: 10
      continue-on-error: ${{ matrix.is-php-experimental }}
      strategy:
          max-parallel: 5
          matrix:
              php:
                  - '8.2'
                  - '8.3'
                  - '8.4'
              is-php-experimental: [true]
              generate-coverage-report: [false]
              include:
                - php: '8.2'
                  is-php-experimental: false
                  generate-coverage-report: true
                # php-8.3 support issues with laminas/laminas-zendframework-bridge & laminas/laminas-code
                #- php: '8.3'
                  #is-php-experimental: false
                  #generate-coverage-report: false
          fail-fast: false
      steps:
          - name: Checkout on SHA-${{ inputs.triggering-sha }}
            uses: actions/checkout@v5
            with:
                ref: ${{ inputs.triggering-sha }}

          - name: Setup PHP and composer dependencies
            uses: './.github/actions/php-setup'
            with:
                php-version: '8.2'
                php-extensions: ${{ env.PHP_EXTENSIONS }}
                extensions-cache-key:  ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
                use_php_extensions-cache: ${{ vars.USE_PHP_EXTENSION_CACHE }}
                use_composer-cache: ${{ vars.USE_COMPOSER_CACHE }}

          - name: Run unit tests
            if: ${{ !matrix.generate-coverage-report }}
            run: |
                vendor/bin/phpunit --testsuite=unit --testdox --colors=always
            continue-on-error: ${{ matrix.is-php-experimental }}
            
          - name: Run unit tests WITH COVERAGE
            if: ${{ matrix.generate-coverage-report }}
            run: |
                vendor/bin/phpunit --testsuite=unit --testdox --colors=always \
                --coverage-clover ${{ vars.UNIT_TEST_CLOVER_FILENAME }} \
                --testdox-text ${{ vars.UNIT_TEST_DOC_FILENAME }}
            continue-on-error: ${{ matrix.is-php-experimental }}

          - name: Get Coverage artifact name
            if: ${{ matrix.generate-coverage-report }}
            id: coverage-artifact-name
            run: echo "name=${{ vars.ARTIFATC_NAME_FOR_UNIT_TESTS_COVERAGE }}-$GITHUB_SHA" >> $GITHUB_OUTPUT

          - name: Save coverage reports
            if: ${{ matrix.generate-coverage-report }}
            uses: actions/upload-artifact@v5
            with:
                name: ${{ steps.coverage-artifact-name.outputs.name }}
                path: ${{ vars.UNIT_TEST_CLOVER_FILENAME }}

          - name: Get Test doc artifact name
            if: ${{ matrix.generate-coverage-report }}
            id: test-doc-artifact-name
            run: echo "name=${{ vars.ARTIFATC_NAME_FOR_UNIT_TESTS_DOCUMENTATION_REPORT }}-$GITHUB_SHA" >> $GITHUB_OUTPUT

          - name: Save test doc reports
            if: ${{ matrix.generate-coverage-report }}
            uses: actions/upload-artifact@v5
            with:
                name: ${{ steps.test-doc-artifact-name.outputs.name }}
                path: ${{ vars.UNIT_TEST_DOC_FILENAME }}
